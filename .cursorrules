## Project Overview
This is a React component library that mirrors Fleet Air (Compose) components for web prototyping. The goal is to recreate JetBrains Fleet's Compose-based UI components in React to enable rapid web prototyping using familiar Fleet design patterns. This project uses shadcn/ui, which is built on top of Radix UI primitives.

## Technologies Used
- **Next.js 15.3.4** - App Router, RSC (React Server Components), and Turbopack.
- **React 19.0.0** - Latest React with modern features and hooks.
- **TypeScript 5** - Full type safety and better developer experience.
- **shadcn/ui** - Composable and accessible components.
- **Radix UI** - Provides the unstyled, accessible component primitives for shadcn/ui.
- **Tailwind CSS 4** - Utility-first CSS framework for styling.
- **Class Variance Authority (CVA) 0.7.1** - For creating type-safe component variants.
- **clsx 2.1.1 + tailwind-merge 3.3.1** - For composing class names.
- **Lucide React 0.518.0** - Icon library.

## Directory Structure
The structure is based on a Next.js App Router project, with shadcn/ui conventions.
`​`​`​
fleet/air-web-components/
├── .git/
├── src/
│   ├── app/                         # Next.js App Router pages
│   │   ├── ui/                      # shadcn/ui components
│   │   └── index.ts                 # Custom component exports
│   ├── lib/
│   │   └── utils.ts                 # cn() utility
│   └── stories/                     # Storybook documentation (if added)
├── public/
├── components.json                  # shadcn/ui configuration
├── package.json
├── tsconfig.json
└── next.config.ts
`​`​`​

## Development Patterns

### Component Creation
1.  Use the `shadcn-ui` CLI to add new UI components from its library.
2.  Create custom, composite components in `src/components/`.
3.  Use the `cn()` utility from `src/lib/utils.ts` for all className composition.
4.  Use CVA for creating component variants where necessary.
5.  Export custom components from `src/components/index.ts`.
6.  If Storybook is added, create stories in `src/stories/` for documentation and testing.

### Styling Approach
-   Built on shadcn/ui and Radix UI for accessibility and behavior.
-   Styled with Tailwind CSS.
-   Use the `cn()` utility for combining conditional classes.
-   Leverage type-safe variants with CVA.

## Key Commands
`​`​`​bash
npm run dev         # Start development server (localhost:3000)
npm run build       # Build for production
npm run start       # Start production server
npm run lint        # Run linter
`​`​`​
To add a new shadcn/ui component:
`​`​`​bash
npx shadcn-ui@latest add [component-name]
`​`​`​

## Project Goals
1.  **Mirror Fleet Air components** - Recreate Compose UI in React.
2.  **Accessibility first** - Built on Radix UI primitives via shadcn/ui.
3.  **Type safety** - Full TypeScript support with strict mode.
4.  **Developer experience** - Easy to use, extend, and maintain with well-documented components.
5.  **Prototyping ready** - Enable developers to quickly build UIs with a Fleet-like look and feel.

## Context for AI Assistants
- This is a component library project, not a standalone application. The Next.js app is for developing and showcasing the components.
- Focus on creating reusable, accessible, and type-safe components.
- Adhere to Fleet Air design patterns and behaviors when creating components.
- Prioritize developer experience and clear documentation.
- Use modern React 19 and Next.js 15 patterns and best practices. 