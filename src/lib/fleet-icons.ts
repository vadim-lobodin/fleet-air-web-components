// Fleet Icon Registry - maps icon keys to file paths
// Based on the Fleet IconKeys.kt structure

export interface FleetIconCategory {
  [key: string]: string | FleetIconCategory
}

export const FleetIcons = {
  // Root level icons
  add: "add",
  "arrow-down": "arrow-down", 
  "arrow-left": "arrow-left",
  "arrow-right": "arrow-right",
  "arrow-up": "arrow-up",
  build: "build",
  "checkbox-checked": "checkbox-checked",
  "checkbox-indeterminate": "checkbox-indeterminate",
  checkmark: "checkmark",
  "chevron-down": "chevron-down",
  "chevron-left": "chevron-left", 
  "chevron-right": "chevron-right",
  "chevron-up": "chevron-up",
  "close-small": "close-small",
  close: "close",
  codecanvas: "codecanvas",
  "collapse-all": "collapse-all",
  collapse: "collapse",
  "color-mode-dark": "color-mode-dark",
  "color-mode-light": "color-mode-light",
  "color-mode-sync-with-os": "color-mode-sync-with-os",
  configure: "configure",
  connection: "connection",
  copy: "copy",
  database: "database",
  "debugger-fill": "debugger-fill",
  "debugger-gutter": "debugger-gutter",
  debugger: "debugger",
  delete: "delete",
  detach: "detach",
  docker: "docker",
  edit: "edit",
  email: "email",
  "error-outline-white": "error-outline-white",
  "error-outline": "error-outline",
  error: "error",
  exit: "exit",
  "expand-all": "expand-all",
  expand: "expand",
  explain: "explain",
  "external-link": "external-link",
  filter: "filter",
  "fleet-logo": "fleet-logo",
  folder: "folder",
  github: "github",
  "gradle-reload": "gradle-reload",
  gradle: "gradle",
  "health-check": "health-check",
  hide: "hide",
  "indexing-progress": "indexing-progress",
  "info-outline": "info-outline",
  info: "info",
  keymap: "keymap",
  link: "link",
  linux: "linux",
  locked: "locked",
  "match-case": "match-case",
  menu: "menu",
  "module-active": "module-active",
  "more-horizontal": "more-horizontal",
  "more-vertical": "more-vertical",
  "new-file": "new-file",
  "no-problems-found": "no-problems-found",
  "node-error": "node-error",
  "notifications-mute": "notifications-mute",
  "notifications-read-all": "notifications-read-all",
  notifications: "notifications",
  "offline-mode": "offline-mode",
  "open-in-tab": "open-in-tab",
  "panel-bottom-closed": "panel-bottom-closed",
  "panel-bottom-open": "panel-bottom-open",
  "panel-left-closed": "panel-left-closed",
  "panel-left-open": "panel-left-open",
  "panel-right-closed": "panel-right-closed",
  "panel-right-open": "panel-right-open",
  pause: "pause",
  pin: "pin",
  plugin: "plugin",
  "preview-bottom-closed": "preview-bottom-closed",
  "preview-bottom-open": "preview-bottom-open",
  "preview-right-closed": "preview-right-closed",
  "preview-right-open": "preview-right-open",
  progress: "progress",
  quote: "quote",
  "read-access": "read-access",
  "read-write-access": "read-write-access",
  redo: "redo",
  regex: "regex",
  reload: "reload",
  "remote-machine-error": "remote-machine-error",
  "remote-machine-offline": "remote-machine-offline",
  "remote-machine-online": "remote-machine-online",
  remove: "remove",
  replace: "replace",
  restart: "restart",
  resume: "resume",
  "run-fill": "run-fill",
  "run-gutter": "run-gutter",
  run: "run",
  search: "search",
  settings: "settings",
  show: "show",
  "smart-mode-error": "smart-mode-error",
  "smart-mode-on": "smart-mode-on",
  "smart-mode": "smart-mode",
  "step-over": "step-over",
  stop: "stop",
  success: "success",
  symbols: "symbols",
  symlink: "symlink",
  terminal: "terminal",
  theme: "theme",
  tools: "tools",
  undo: "undo",
  "user-add": "user-add",
  user: "user",
  "warning-outline": "warning-outline",
  warning: "warning",
  "win-file": "win-file",
  words: "words",
  workspace: "workspace",
  "write-access": "write-access",

  // AI Icons
  ai: {
    agent: "ai/agent",
    "assistant-tool": "ai/assistant-tool",
    assistant: "ai/assistant",
    chat: "ai/chat",
    cloud: "ai/cloud",
    dislike: "ai/dislike",
    "empty-state-chat": "ai/empty-state-chat",
    "empty-state-code": "ai/empty-state-code",
    "empty-state-terminal": "ai/empty-state-terminal",
    "empty-state-vcs": "ai/empty-state-vcs",
    "empty-state": "ai/empty-state",
    "file-attachment": "ai/file-attachment",
    "file-status-accepted": "ai/file-status-accepted",
    "file-status-partially-accepted": "ai/file-status-partially-accepted",
    "file-status-rejected": "ai/file-status-rejected",
    "file-status-unaccepted": "ai/file-status-unaccepted",
    file: "ai/file",
    like: "ai/like",
    "mcp-server": "ai/mcp-server",
    mention: "ai/mention",
    "new-project": "ai/new-project",
    packages: "ai/packages",
    "run-commands": "ai/run-commands",
    send: "ai/send",
    snapshot: "ai/snapshot",
    stop: "ai/stop",
    "voice-command": "ai/voice-command",
    web: "ai/web",
  },

  // Breakpoint Icons
  breakpoints: {
    "breakpoint-inactive": "breakpoints/breakpoint-inactive",
    breakpoint: "breakpoints/breakpoint",
    "breakpoints-tool": "breakpoints/breakpoints-tool",
    "exception-breakpoint-inactive": "breakpoints/exception-breakpoint-inactive",
    "exception-breakpoint": "breakpoints/exception-breakpoint",
  },

  // VCS Icons
  vcs: {
    added: "vcs/added",
    "apply-left": "vcs/apply-left",
    "apply-right": "vcs/apply-right",
    branch: "vcs/branch",
    commit: "vcs/commit",
    conflict: "vcs/conflict",
    diff: "vcs/diff",
    get: "vcs/get",
    history: "vcs/history",
    "merge-request": "vcs/merge-request",
    modified: "vcs/modified",
    removed: "vcs/removed",
    untracked: "vcs/untracked",
    vcs: "vcs/vcs",
  },

  // File Type Icons (extensive list)
  fileTypes: {
    amper: "file-types/amper",
    asm: "file-types/asm",
    asp: "file-types/asp",
    audio: "file-types/audio",
    batch: "file-types/batch",
    bicep: "file-types/bicep",
    "c-sharp": "file-types/c-sharp",
    c: "file-types/c",
    clojure: "file-types/clojure",
    coffeescript: "file-types/coffeescript",
    column: "file-types/column",
    config: "file-types/config",
    cpp: "file-types/cpp",
    csproj: "file-types/csproj",
    css: "file-types/css",
    csv: "file-types/csv",
    cuda: "file-types/cuda",
    d: "file-types/d",
    dart: "file-types/dart",
    database: "file-types/database",
    docker: "file-types/docker",
    "docker-compose": "file-types/docker-compose",
    "docker-ignore": "file-types/docker-ignore",
    elixir: "file-types/elixir",
    elm: "file-types/elm",
    erlang: "file-types/erlang",
    "f-sharp": "file-types/f-sharp",
    fastapi: "file-types/fastapi",
    flask: "file-types/flask",
    font: "file-types/font",
    git: "file-types/git",
    github: "file-types/github",
    gitignore: "file-types/gitignore",
    go: "file-types/go",
    gradle: "file-types/gradle",
    graphql: "file-types/graphql",
    groovy: "file-types/groovy",
    hacklang: "file-types/hacklang",
    haml: "file-types/haml",
    handlebars: "file-types/handlebars",
    hashicorp: "file-types/hashicorp",
    haskell: "file-types/haskell",
    haxe: "file-types/haxe",
    header: "file-types/header",
    html: "file-types/html",
    illustrator: "file-types/illustrator",
    image: "file-types/image",
    java: "file-types/java",
    javascript: "file-types/javascript",
    jest: "file-types/jest",
    json: "file-types/json",
    jsp: "file-types/jsp",
    julia: "file-types/julia",
    kotlin: "file-types/kotlin",
    less: "file-types/less",
    license: "file-types/license",
    lua: "file-types/lua",
    makefile: "file-types/makefile",
    markdown: "file-types/markdown",
    maven: "file-types/maven",
    mdx: "file-types/mdx",
    mocha: "file-types/mocha",
    mustache: "file-types/mustache",
    nodejs: "file-types/nodejs",
    npm: "file-types/npm",
    "objective-c": "file-types/objective-c",
    "objective-cpp": "file-types/objective-cpp",
    ocaml: "file-types/ocaml",
    pdf: "file-types/pdf",
    perl: "file-types/perl",
    photoshop: "file-types/photoshop",
    php: "file-types/php",
    powershell: "file-types/powershell",
    pug: "file-types/pug",
    puppet: "file-types/puppet",
    python: "file-types/python",
    r: "file-types/r",
    razor: "file-types/razor",
    react: "file-types/react",
    reasonml: "file-types/reasonml",
    ruby: "file-types/ruby",
    rust: "file-types/rust",
    sass: "file-types/sass",
    sbt: "file-types/sbt",
    scala: "file-types/scala",
    schema: "file-types/schema",
    shell: "file-types/shell",
    sln: "file-types/sln",
    smarty: "file-types/smarty",
    spring: "file-types/spring",
    stylus: "file-types/stylus",
    svelte: "file-types/svelte",
    swift: "file-types/swift",
    table: "file-types/table",
    terraform: "file-types/terraform",
    tex: "file-types/tex",
    text: "file-types/text",
    toml: "file-types/toml",
    twig: "file-types/twig",
    typescript: "file-types/typescript",
    video: "file-types/video",
    view: "file-types/view",
    vue: "file-types/vue",
    wasm: "file-types/wasm",
    webpack: "file-types/webpack",
    xml: "file-types/xml",
    yarn: "file-types/yarn",
    yml: "file-types/yml",
    zig: "file-types/zig",
  },
} as const

// Helper function to get icon path
export function getFleetIconPath(iconKey: string): string | null {
  const keys = iconKey.split('.')
  let current: FleetIconCategory | string = FleetIcons
  
  for (const key of keys) {
    if (current && typeof current === 'object' && key in current) {
      current = current[key]
    } else {
      return null
    }
  }
  
  return typeof current === 'string' ? current : null
}

// Helper function to get all available Fleet icons
export function getAllFleetIcons(): string[] {
  const icons: string[] = []
  
  function traverse(obj: FleetIconCategory): void {
    for (const value of Object.values(obj)) {
      if (typeof value === 'string') {
        icons.push(value)
      } else if (typeof value === 'object') {
        traverse(value)
      }
    }
  }
  
  traverse(FleetIcons)
  return icons.sort()
}

// Export commonly used icon categories for easier access
export const CommonFleetIcons = {
  // Navigation
  chevronDown: "chevron-down",
  chevronUp: "chevron-up",
  chevronLeft: "chevron-left",
  chevronRight: "chevron-right",
  
  // Actions
  close: "close",
  add: "add",
  delete: "delete",
  edit: "edit",
  search: "search",
  
  // Status
  success: "success",
  warning: "warning",
  error: "error",
  info: "info",
  
  // File operations
  folder: "folder",
  newFile: "new-file",
  
  // Development
  run: "run",
  stop: "stop",
  debugger: "debugger",
  terminal: "terminal",
  
  // AI
  aiChat: "ai/chat",
  aiAssistant: "ai/assistant",
  aiFile: "ai/file",
  
  // Version Control
  vcsCommit: "vcs/commit",
  vcsBranch: "vcs/branch",
  vcsModified: "vcs/modified",
  vcsAdded: "vcs/added",
} as const 